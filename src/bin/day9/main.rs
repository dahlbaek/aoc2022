use std::collections::HashSet;

fn handle_head(direction: &str, head: &mut (i64, i64)) {
    match direction {
        "R" => head.0 += 1,
        "U" => head.1 += 1,
        "L" => head.0 -= 1,
        "D" => head.1 -= 1,
        _ => panic!("Unrecognized byte {}", direction),
    }
}

fn handle_tail<const N: usize>(rope: &mut [(i64, i64); N]) {
    for j in 1..N {
        let succ = rope[j - 1];
        let curr = &mut rope[j];
        if succ.0.abs_diff(curr.0) > 1 || succ.1.abs_diff(curr.1) > 1 {
            curr.0 += (succ.0 - curr.0).signum();
            curr.1 += (succ.1 - curr.1).signum();
        }
    }
}

fn find_visited<const N: usize>(s: &str) -> usize {
    let mut visited = HashSet::<(i64, i64)>::new();
    let mut rope = [(0, 0); N];
    visited.insert(rope[N - 1]);
    for line in s.lines() {
        let (direction, steps) = line.split_once(' ').unwrap();
        for _ in 0..steps.parse::<u64>().unwrap() {
            handle_head(direction, &mut rope[0]);
            handle_tail(&mut rope);
            visited.insert(rope[N - 1]);
        }
    }
    visited.len()
}

fn main() {
    let input = include_str!("input");
    println!("{}", find_visited::<2>(input));
    println!("{}", find_visited::<10>(input));
}

#[cfg(test)]
mod tests {

    use crate::find_visited;

    const INPUT1: &'static str = include_str!("test-input");
    const INPUT2: &'static str = include_str!("test-input-2");

    fn plot_rope<const N: usize>(rope: &[(i64, i64); N]) -> String {
        let mut s = String::new();
        for y in (-15..15).rev() {
            for x in -30..30 {
                let mut c = String::from(".");
                for (idx, &p) in rope.iter().enumerate().rev() {
                    if p == (x, y) {
                        c = format!("{}", idx);
                    }
                }
                s.push_str(&c);
            }
            s.push('\n');
        }
        s
    }

    #[test]
    fn it_works_1() {
        assert_eq!(find_visited::<2>(INPUT1), 13);
    }

    #[test]
    fn it_works_2() {
        assert_eq!(find_visited::<10>(INPUT1), 1);
    }

    #[test]
    fn it_works_3() {
        assert_eq!(find_visited::<10>(INPUT2), 36);
    }

    const PLOT: &str = r#"............................................................
............................................................
............................................................
............................................................
............................................................
............................................................
............................................................
............................................................
............................................................
............................................................
............................................................
................................2...........................
...............................01...........................
............................................................
............................................................
............................................................
............................................................
............................................................
............................................................
............................................................
............................................................
............................................................
............................................................
............................................................
............................................................
............................................................
............................................................
............................................................
............................................................
............................................................
"#;

    #[test]
    fn plot_works() {
        assert_eq!(plot_rope::<3>(&[(1, 2), (2, 2), (2, 3)]), PLOT);
    }
}
